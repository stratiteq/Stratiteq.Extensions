# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# YAML schema reference:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema

trigger:
- master

# Set the build run name. If a this is a PR build prefix with PR otherwise CI.
variables:

  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    buildVariant: PR
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    buildVariant: CI

name: $(buildVariant)-$(Date:yyyyMMdd)$(Rev:.r)  # build run name

stages:

- stage: 'Build'
  variables:
    buildConfiguration: 'Release'

  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: DotNetCoreCLI@2
      displayName: "NuGet Restore"
      inputs:
        command: restore
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: "Build Solution"
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Release Version'
      inputs:
        command: pack
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/releases'
        arguments: '--configuration $(buildConfiguration)'
        nobuild: true
    
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package - Prerelease Version'
      inputs:
        command: pack
        buildProperties: 'VersionSuffix="$(Build.BuildNumber)"'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/prereleases'
        arguments: '--configuration $(buildConfiguration)'
        
    - publish: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'packages'
        


- stage: 'PublishPrereleaseNuGetPackage'
  displayName: 'Publish Prerelease NuGet Package'
  dependsOn: 'Build'
  condition: succeeded()
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - checkout: none

    - download: current
      artifact: 'packages'

    - task: NuGetToolInstaller@1
      inputs:
        versionSpec: '5.*'
        checkLatest: true

    - task: NuGetCommand@2
      displayName: 'Push NuGet Package'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg;(Pipeline.Workspace)/packages/prereleases/*.snupkg;'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'SQ-Internal-OpenSource-Feed'
        allowPackageConflicts: true
        nugetConfigPath: '$(Build.WorkingDirectory)/NuGet.config'

- stage: 'PublishReleaseNuGetPackage'
  displayName: 'Publish Release NuGet Package'
  dependsOn: 'PublishPrereleaseNuGetPackage'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - deployment:
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'nuget-org'
    strategy:
     runOnce:
       deploy:
         steps:
         - task: NuGetToolInstaller@1
           inputs:
            versionSpec: '5.*'
            checkLatest: true

         - task: NuGetCommand@2
           displayName: 'Push NuGet Package'
           inputs:
             command: 'push'
             packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg;$(Pipeline.Workspace)/packages/releases/*.snupkg'
             nuGetFeedType: 'external'
             publishFeedCredentials: 'nuget.org'
             nugetConfigPath: '$(Pipeline.Workspace)/NuGet.config'